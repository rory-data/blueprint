[project]
name = "airflow-blueprint"
dynamic = ["version"]
description = "Create reusable Airflow DAG templates with validated configurations"
readme = "README.md"
license = {text = "MIT"}
authors = [
    { name = "Astronomer", email = "humans@astronomer.io" }
]
maintainers = [
    { name = "Astronomer", email = "humans@astronomer.io" }
]
keywords = ["airflow", "dags", "templates", "blueprints", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Framework :: Apache Airflow",
]
requires-python = ">=3.11, <3.13"

dependencies = [
    "pyyaml>=6.0",
    "apache-airflow>=2.10.0",
    "click>=8.0.0",
    "pydantic>=2.10.6",
    "rich>=13.9.4",
    "jinja2>=3.0.0",
]

[dependency-groups]
dev = [
    "hypothesis>=6.113.0",
    "pre-commit>=3.5.0",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.3",
    "pyright>=1.1.0",
    "ty>=0.0.1a15",
]

[project.scripts]
blueprint = "blueprint.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["blueprint"]

[tool.hatch.version]
path = "blueprint/__init__.py"

[tool.ruff]
target-version = "py311"
line-length = 88
extend-exclude = ["examples/"]
fix = true

[tool.ruff.lint]
select = [
    "A",   # flake8-builtins
    "AIR", # Airflow
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # flake8-cognitive-complexity (mccabe)
    "D",   # pydocstyle
    "DTZ", # flake8-datetime timezones
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "FURB", # refurb-specific rules
    "G",   # flake8-logging-format
    "I",   # isort
    "LOG", # flake8-logging
    "N",   # pep8-naming
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]
ignore = [
    "C901", # complex-structure (mccabe)
    "D203", # one-blank-line-before-class (conflicts with D211)
    "D212", # multi-line-summary-first-line (conflicts with D213)
    "E501", # line-too-long
    "F403", # undefined-local-with-import-star
]
# Let unfixable automatically be ignored during ruff format
unfixable = [
    "F401", # unused-import
]

[tool.ruff.format]
quote-style = "double"  # like Black, use double quotes for strings.
indent-style = "space"  # like Black, indent with spaces.
skip-magic-trailing-comma = false  # like Black, respect magic trailing commas.
line-ending = "auto"  # like Black, automatically detect the appropriate line ending.
docstring-code-format = false
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # unused import in __init__ files
"**/{tests,docs,tools}/**" = ["S101", "ANN", "S603"] # assert usage and type annotations in tests
"conftest.py" = [
    "S101",
    "ANN",
] # assert usage and type annotations in pytest config

[tool.ruff.lint.isort]
known-first-party = ["blueprint"]

[tool.ruff.lint.pydocstyle]
convention = "google" # Use Google-style docstrings

[tool.pytest.ini_options]
pythonpath = ["."]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
